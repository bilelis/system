version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: hotel-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hotel_management
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/migrations:/docker-entrypoint-initdb.d/migrations
      - ../database/seeds:/docker-entrypoint-initdb.d/seeds
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hotel-network

  backend:
    build:
      context: ../backend
      dockerfile: ../devops/Dockerfile.backend
    container_name: hotel-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: hotel_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      JWT_SECRET_KEY: dev_secret_key_change_in_production
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 1440
      GEMINI_API_KEY: ${GEMINI_API_KEY:-your_gemini_api_key}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key}
      DEBUG: "True"
      ALLOW_ORIGINS: '["http://localhost:5173", "http://localhost:3001"]'
    volumes:
      - ../backend:/app
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway:
    build:
      context: ../gateway
      dockerfile: ../devops/Dockerfile.gateway
    container_name: hotel-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      BACKEND_URL: http://backend:8000
      JWT_SECRET: dev_secret_key_change_in_production
    volumes:
      - ../gateway:/app
      - /app/node_modules
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ../frontend
      dockerfile: ../devops/Dockerfile.frontend
      target: development
    container_name: hotel-frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    depends_on:
      gateway:
        condition: service_healthy
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_GEMINI_API_KEY: ${VITE_GEMINI_API_KEY:-your_gemini_api_key}
    volumes:
      - ../frontend:/app
      - /app/node_modules
    networks:
      - hotel-network
    stdin_open: true
    tty: true

volumes:
  postgres_data:
    driver: local

networks:
  hotel-network:
    driver: bridge